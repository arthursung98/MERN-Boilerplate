React.js
  Purpose : Frontend framework.

Concepts:
    1. Real DOM vs. Virtual DOM (Document Object Model)
        : Virtual DOM only has to reload items that have been updated / changed.
    2. Webpack
        : combines complex modules(due to modern websites being very complex) into simple HTML, CSS & JS
          Pictures should be placed under the /src folder for the webpack to do its job, not the public
          file.
    3. npm vs. npx
        : NPM = Node Package Manager. A command line utility for interacting with package installations,
          version management, and dependency managements. The package.json file summarizes all of what
          npm does. Most packages are downloaded locally into node_modules.
          NPX = Borrowing stuff in Node without having to download globally to the local machine.
          Disk space saved, and we use the latest version.
    4. CORS(Cross Origin Resource Sharing) Issue
        : If the backend server & the frontend are using different ports, i.e. 3000 vs 5000, then
          requests cannot be sent to each other without special settings.
          How to solve ?
          Set the Proxy manually. See section 4 in Dependencies & Libraries
    5. Proxy Server
        : Randomizes the IP address between the user and the internet. Couple of security strengths
          such as Firewalls & Webfilters.
    6. Redux
        : A predictable state container for JS apps. Redux stores the state changes in one hub so that
          each component can just access that hub to apply changes. What is a state ??
        Props vs. State
            6.1 Props
            : Shorthand for properties. In the communication between components in HTML, the parent
              component will send down their properties to the child element. Prperties are immutable.
            6.2 State
            : If we just want to send data within the component, use the State. States are mutable
              and is re-rendered when changed.
        Data Flow:
            1. Action
                : Starts from the React Component, and describes what changes happened thru a plain 
                  object.
            2. Reducer
                : Gets the previous state & the action object and returns the next state.
                  Reducers are pure functions!
            3. Store
                : Sotre holds the whole state tree. The only way to change the state inside is to
                  dispatch an action on it.
    7. React - Class Component vs. Functional Components
        7.1 Class Components
            : can provide more features, but uses longer & more complex code. Slower performance.
              Only class components were able to deal with Render phase & commit phase, so
              most of the time Class components were used. Until React Hooks.
        7.2 Functional Components
            : less features, uses shorter & simpler code. Faster performance.
    8. React Hooks
        : Allows Fucntional Components to deal with render phase & commit phase
            
Grammar:
    1. Import
        1.1 Must import React from 'react';
        1.2 Must import Router DOM by
        import {
            BrowserRouter as Router,
            Switch,
            Route,
            Link
        } from "react-router-dom";
    2. Router
        2.1 When using <Route ... component={ ... } />, must specify with 'exact path'


Dependencies & Libraries :
    1. Downloading (Kind of) React
        Command : npx create-react-app .
    2. Turning on the React App
        Command : npm run start
    3. React Router DOM
        Command : npm install eact-router-dom --save & import the package
    4. Axios
        Command : npm install axios --save
        Purpose : Neccessary when sending requests to the server / DB thru React
    5. Proxy Middleware
        Command : npm install http-proxy-middleware --save
                  Then, create setupProxy.js in the src file.
                  In the setupProxy file, specify which port number to set proxy to.
        Purpose : Reroutes the requests so that the request sent from the frontend,
                  i.e. Port #3000, can be used by port #5000 on the backend.
    6. Concurrently
        Command : npm install concurrently --save
                  Then, write in package.json
                    "dev": "concurrently \"npm run backend\" \"npm run start --prefix client\" "
        Purpose : Instead of having to run two terminals to power up the backend &
                  frontend, we can start both at the same time.
    7. CSS Framwork - Ant Design
        Command : npm install antd --save
        Purpose: To spend less time working on the design and focus on the functions of the program.
    8. Redux Dependencies
        Command : npm install redux react-redux redux-promise redux-thunk --save
            Then use <Provider /> in index.js
        Purpose :
            1. Middleware - redux promise & redux thunk
                : The only way to change the Store is thru a dispatch, and only accepts objects.
                  But sometimes Store receives a promise or a function. These middleware "teaches"
                  dispatch how to accept these inputs that vary from expected behavior.
    

React App Structure :
    Ex) In index.js => <React.StrictMode><App /></React.StrictMode>, document.getElementById('root')
    We get the element that has the Id 'root', and show <App/> on that element.